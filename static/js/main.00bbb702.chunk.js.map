{"version":3,"sources":["Component/Navbar.js","Component/TextEntry.js","Component/Alert.js","Component/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","detail","onClick","toggle","role","TextEntry","useState","text","setText","rows","value","onChange","e","console","log","target","style","backgroundColor","fontSize","color","t","toUpperCase","updateAlert","toLowerCase","length","Alert","alert","tabIndex","message","About","border","padding","borderRadius","margin","setStyle","button","setButton","App","setMode","setAlert","document","body","path","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.00bbb702.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/About\">About</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">{props.detail}</a>\r\n              </li>\r\n            </ul>\r\n            \r\n            <div className={`form-check form-switch text-${props.mode===\"light\"?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggle} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\"  >Enable Dark Mode</label>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  )\r\n}\r\n","import { useState } from \"react\";\r\nimport React from 'react'\r\n// const test=()=>{\r\n//     if(text.length==0){\r\n//         return (\r\n\r\n//             <p>{text.split(\" \").length-1} no of words </p>\r\n//         );\r\n//      }\r\n//      else{\r\n//          return (\r\n//              <p>{text.split(\" \").length} no of words </p>\r\n//          );\r\n//      }\r\n// }\r\n\r\nexport default function TextEntry(props) {\r\n    const [text, setText] = useState(\"hello please enter the text\");\r\n    const convertToCapital=()=>{\r\n        console.log(\"uppercase\");\r\n        let t=text.toUpperCase();\r\n        setText(t);\r\n        props.updateAlert(\"CONVERTED TO UPPERCASE\" ,\"success\");\r\n        \r\n    }\r\n    const convertToSmall=()=>{\r\n        console.log(\"lowercase\");\r\n        let t=text.toLowerCase();\r\n        setText(t);\r\n        props.updateAlert(\"CONVERTED TO SMALLCASE\" ,\"success\");\r\n    }\r\n    const clearText=()=>{\r\n        console.log(\"clear\")\r\n        setText(\"\");\r\n        props.updateAlert(\"ENTRY CLEARED\" ,\"warning\");\r\n    }\r\n    const changeText=(e)=>{\r\n        console.log(\"change\");\r\n        setText(e.target.value);\r\n    }\r\n  \r\n    return (\r\n        <>\r\n        <div className=\"container my-4\">\r\n            <div className=\"mb-3\">\r\n                <label  className={`form-label text-${props.mode===\"light\"?'dark':'light'}`}>ENTER THE TEXT TO BE CONVERTED</label>\r\n                <textarea className=\"form-control\" id=\"text\" rows=\"10\" value={text} onChange={changeText}  style={{backgroundColor:props.mode===\"light\"?'black':'pink',fontSize:\"25px\",color:props.mode===\"light\"?\"white\":\"black\"}}></textarea>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary\" onClick={convertToCapital}>CAPITAL</button>\r\n            <button type=\"button\" className=\"btn btn-secondary mx-4\" onClick={convertToSmall}>SMALL</button>\r\n            <button type=\"button\" className=\"btn btn-danger\" onClick={clearText}>CLEAR</button>\r\n            <h2 className=\"my-4\" style={{color:props.mode===\"light\"?'green':'white'}}>{text.length>0?text:\"Enter the text\"}</h2>\r\n            <p style={{color:props.mode===\"light\"?'black':'pink',fontSize:\"30px\"}}>{text.length} no of characters </p>\r\n            \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n        <div>\r\n            <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" tabIndex=\"0\">\r\n                <strong>{props.alert.type}</strong>    {props.alert.message}\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function About() {\r\n    const [style,setStyle]=useState({\r\n        color:\"blue\",\r\n        backgroundColor:\"pink\",\r\n        border:\"3px solid black\",\r\n        padding:\"30px\",\r\n        borderRadius:\"50px\",\r\n        margin:\"10px auto\"\r\n    });\r\n\r\n    const [button,setButton]=useState(\"Enable Dark\");\r\n    const enableDark=()=>{\r\n        if(style.backgroundColor===\"pink\"){\r\n            setStyle({\r\n                color:\"white\",\r\n                backgroundColor:\"black\",\r\n                border:\"3px solid red\",\r\n                padding:\"30px\",\r\n                borderRadius:\"50px\",\r\n                margin:\"10px auto\"\r\n            })\r\n            setButton(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setStyle({\r\n                color:\"blue\",\r\n                backgroundColor:\"pink\",\r\n                border:\"3px solid black\",\r\n                padding:\"30px\",\r\n                borderRadius:\"50px\",\r\n                margin:\"10px auto\"\r\n            })\r\n            setButton(\"Enable Dark Mode\");\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\" style={style}>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\" style={style}>\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\" style={style}>\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\"style={style}>\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-dark\" style={style} onClick={enableDark}>{button}</button>\r\n            {/* <button type=\"button\" className=\"btn btn-light\" onClick={enableDark}>{button}</button> */}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\r\nimport Navbar from './Component/Navbar'\r\nimport TextEntry from './Component/TextEntry';\r\nimport Alert from './Component/Alert';\r\nimport About from './Component/About';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n// import About from './Component/About';\r\nimport { useState } from 'react';\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const toggleMode = () => {\r\n    console.log(\"toggling\");\r\n    if (mode === \"light\") {\r\n      setMode(\"dark\");\r\n      document.body.style.backgroundColor = \"#2F326D\";\r\n      document.title = \"React TEXT App-DARK MODE\";\r\n    }\r\n    else {\r\n      setMode(\"light\");\r\n      document.body.style.backgroundColor = \"white\";\r\n      document.title = \"React TEXT App\";\r\n    }\r\n  }\r\n\r\n  const [alert, setAlert] = useState({ message: \"hello i am praved\", type: \"success\" });\r\n  const setMessage = (message, type) => {\r\n    setAlert({\r\n      message: message,\r\n      type: type\r\n    });\r\n    setTimeout(() => {\r\n      setAlert({\r\n        message: \"\",\r\n        type: null\r\n      });\r\n    }, 2000);\r\n  }\r\n  return (\r\n    <>\r\n    hello this is react tutorial\r\n      <Navbar title=\"Praved Converter\" detail=\"this is string converter\" mode={mode} toggle={toggleMode} />\r\n      {/* <Alert alert={alert} />\r\n      <TextEntry mode={mode} updateAlert={setMessage} /> */}\r\n      {/* <About/> */}\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/About\">\r\n            <About />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            {/* <Navbar title=\"Praved Converter\" detail=\"this is string converter\" mode={mode} toggle={toggleMode} /> */}\r\n            <Alert alert={alert} />\r\n            <TextEntry mode={mode} updateAlert={setMessage} />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}